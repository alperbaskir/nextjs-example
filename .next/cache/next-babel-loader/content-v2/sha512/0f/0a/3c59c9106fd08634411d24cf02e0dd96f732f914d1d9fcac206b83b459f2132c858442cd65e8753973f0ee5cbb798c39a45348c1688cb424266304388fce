{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\yazil\\\\Desktop\\\\Alper\\\\Workspace\\\\11-nextjs-example\\\\pages\\\\[meetupId]\\\\index.js\";\n// yourdomain.com/[meetupId]\nimport { Fragment } from \"react/cjs/react.production.min\";\nimport { MongoClient } from \"mongodb\";\nimport Card from \"../../components/ui/Card\";\n\nconst MeetupDetailsPage = props => {\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Card, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.image,\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: props.image,\n          alt: props.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 11,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 10,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.content,\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: props.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 14,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"address\", {\n          children: props.address\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 15,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 7\n  }, this);\n};\n\nexport const getStaticPaths = async () => {\n  // we use this because this page is dynamic one and with this +\n  // you can pre-generated you're all possible details pages as a list in advanced\n  // otherwise getStaticProps will be crash\n  const client = await MongoClient.connect('mongodb+srv://abaskir:pi8V3zMZwddwZFuN@cluster0.v868k.mongodb.net/meetups?retryWrites=true&w=majority');\n  const db = client.db();\n  const meetupsCollection = db.collection('meetups');\n  const meetups = await meetupsCollection.find({}, {\n    _id: 1\n  }).toArray();\n  client.close();\n  return {\n    fallback: false,\n    // with this you just support elements of paths array\n    paths: meetups.map(meetup => ({\n      params: {\n        meetupId: meetup._id.toString()\n      }\n    }))\n  };\n};\nexport const getStaticProps = async context => {\n  // you can fetch data for a single meetup\n  // you cannot use any react hook in here!!!\n  // We used static props becouse this page dosent need to render very often\n  const meetupId = context.params.meetupId;\n  const client = await MongoClient.connect('mongodb+srv://abaskir:pi8V3zMZwddwZFuN@cluster0.v868k.mongodb.net/meetups?retryWrites=true&w=majority');\n  const db = client.db();\n  const meetupsCollection = db.collection('meetups');\n  const selectedMeetup = meetupsCollection.findOne({\n    _id: meetupId\n  });\n  client.close(); // You cannot find out this console log in the browser\n  // because this func works in build time!!!\n\n  return {\n    props: {\n      meetupData: selectedMeetup\n    }\n  };\n};\nexport default MeetupDetailsPage;","map":{"version":3,"sources":["C:/Users/yazil/Desktop/Alper/Workspace/11-nextjs-example/pages/[meetupId]/index.js"],"names":["Fragment","MongoClient","Card","MeetupDetailsPage","props","classes","image","title","content","address","getStaticPaths","client","connect","db","meetupsCollection","collection","meetups","find","_id","toArray","close","fallback","paths","map","meetup","params","meetupId","toString","getStaticProps","context","selectedMeetup","findOne","meetupData"],"mappings":";;AAAA;AACA,SAASA,QAAT,QAAyB,gCAAzB;AACA,SAASC,WAAT,QAA4B,SAA5B;AACA,OAAOC,IAAP,MAAiB,0BAAjB;;AAEA,MAAMC,iBAAiB,GAAIC,KAAD,IAAW;AACjC,sBACE,QAAC,QAAD;AAAA,2BACE,QAAC,IAAD;AAAA,8BACE;AAAK,QAAA,SAAS,EAAEC,OAAO,CAACC,KAAxB;AAAA,+BACE;AAAK,UAAA,GAAG,EAAEF,KAAK,CAACE,KAAhB;AAAuB,UAAA,GAAG,EAAEF,KAAK,CAACG;AAAlC;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cADF,eAIE;AAAK,QAAA,SAAS,EAAEF,OAAO,CAACG,OAAxB;AAAA,gCACE;AAAA,oBAAKJ,KAAK,CAACG;AAAX;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAA,oBAAUH,KAAK,CAACK;AAAhB;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cAJF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAaH,CAdD;;AAgBA,OAAO,MAAMC,cAAc,GAAG,YAAY;AACtC;AACA;AACA;AACA,QAAMC,MAAM,GAAG,MAAMV,WAAW,CAACW,OAAZ,CAAoB,uGAApB,CAArB;AACA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AACA,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA1B;AACA,QAAMC,OAAO,GAAG,MAAMF,iBAAiB,CAACG,IAAlB,CAAuB,EAAvB,EAA2B;AAACC,IAAAA,GAAG,EAAC;AAAL,GAA3B,EAAoCC,OAApC,EAAtB;AACAR,EAAAA,MAAM,CAACS,KAAP;AACA,SAAO;AACHC,IAAAA,QAAQ,EAAE,KADP;AACc;AACjBC,IAAAA,KAAK,EAAEN,OAAO,CAACO,GAAR,CAAYC,MAAM,KAAG;AAACC,MAAAA,MAAM,EAAC;AAACC,QAAAA,QAAQ,EAAEF,MAAM,CAACN,GAAP,CAAWS,QAAX;AAAX;AAAR,KAAH,CAAlB;AAFJ,GAAP;AAIH,CAbM;AAeP,OAAO,MAAMC,cAAc,GAAG,MAAOC,OAAP,IAAkB;AAC5C;AACA;AACA;AACA,QAAMH,QAAQ,GAAGG,OAAO,CAACJ,MAAR,CAAeC,QAAhC;AACA,QAAMf,MAAM,GAAG,MAAMV,WAAW,CAACW,OAAZ,CAAoB,uGAApB,CAArB;AACA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AACA,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA1B;AACA,QAAMe,cAAc,GAAGhB,iBAAiB,CAACiB,OAAlB,CAA0B;AAACb,IAAAA,GAAG,EAACQ;AAAL,GAA1B,CAAvB;AACAf,EAAAA,MAAM,CAACS,KAAP,GAT4C,CAU5C;AACA;;AACA,SAAO;AACHhB,IAAAA,KAAK,EAAE;AACH4B,MAAAA,UAAU,EAAEF;AADT;AADJ,GAAP;AAKH,CAjBM;AAmBP,eAAe3B,iBAAf","sourcesContent":["// yourdomain.com/[meetupId]\r\nimport { Fragment } from \"react/cjs/react.production.min\";\r\nimport { MongoClient } from \"mongodb\";\r\nimport Card from \"../../components/ui/Card\";\r\n\r\nconst MeetupDetailsPage = (props) => {\r\n    return (\r\n      <Fragment>\r\n        <Card>\r\n          <div className={classes.image}>\r\n            <img src={props.image} alt={props.title} />\r\n          </div>\r\n          <div className={classes.content}>\r\n            <h3>{props.title}</h3>\r\n            <address>{props.address}</address>\r\n          </div>\r\n        </Card>\r\n      </Fragment>\r\n    );\r\n}\r\n\r\nexport const getStaticPaths = async () => {\r\n    // we use this because this page is dynamic one and with this +\r\n    // you can pre-generated you're all possible details pages as a list in advanced\r\n    // otherwise getStaticProps will be crash\r\n    const client = await MongoClient.connect('mongodb+srv://abaskir:pi8V3zMZwddwZFuN@cluster0.v868k.mongodb.net/meetups?retryWrites=true&w=majority')\r\n    const db = client.db();\r\n    const meetupsCollection = db.collection('meetups');\r\n    const meetups = await meetupsCollection.find({}, {_id:1}).toArray();\r\n    client.close();\r\n    return {\r\n        fallback: false, // with this you just support elements of paths array\r\n        paths: meetups.map(meetup=>({params:{meetupId: meetup._id.toString()}}))\r\n    }\r\n}\r\n\r\nexport const getStaticProps = async (context)=> {\r\n    // you can fetch data for a single meetup\r\n    // you cannot use any react hook in here!!!\r\n    // We used static props becouse this page dosent need to render very often\r\n    const meetupId = context.params.meetupId;\r\n    const client = await MongoClient.connect('mongodb+srv://abaskir:pi8V3zMZwddwZFuN@cluster0.v868k.mongodb.net/meetups?retryWrites=true&w=majority')\r\n    const db = client.db();\r\n    const meetupsCollection = db.collection('meetups');\r\n    const selectedMeetup = meetupsCollection.findOne({_id:meetupId})\r\n    client.close();\r\n    // You cannot find out this console log in the browser\r\n    // because this func works in build time!!!\r\n    return {\r\n        props: {\r\n            meetupData: selectedMeetup\r\n        }\r\n    }\r\n}\r\n\r\nexport default MeetupDetailsPage;"]},"metadata":{},"sourceType":"module"}